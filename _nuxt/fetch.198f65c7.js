import{u as v}from"./asyncData.bbff6192.js";import{q as D,u as _,G as g}from"./entry.8ffd76b9.js";function x(o,t,c){const[s={},r]=typeof t=="string"?[{},t]:[t,c],a=s.key||r;if(!a||typeof a!="string")throw new TypeError("[nuxt] [useFetch] key must be a string: "+a);if(!o)throw new Error("[nuxt] [useFetch] request is missing.");const f="$f"+a,i=D(()=>{let n=o;return typeof n=="function"&&(n=n()),_(n)}),{server:y,lazy:p,default:h,transform:l,pick:m,watch:d,initialCache:w,immediate:b,...k}=s,u=g({...k,cache:typeof s.cache=="boolean"?void 0:s.cache}),F={server:y,lazy:p,default:h,transform:l,pick:m,initialCache:w,immediate:b,watch:[u,i,...d||[]]};let e;return v(f,()=>{var n;return(n=e==null?void 0:e.abort)==null||n.call(e),e=typeof AbortController<"u"?new AbortController:{},$fetch(i.value,{signal:e.signal,...u})},F)}function O(o,t,c){const[s,r]=typeof t=="string"?[{},t]:[t,c];return x(o,{...s,lazy:!0},r)}export{O as a,x as u};
